"""Generate explainable outputs for anomaly detections without external dependencies."""
from __future__ import annotations

import sys
from pathlib import Path

if __package__ in {None, ""}:
    sys.path.append(str(Path(__file__).resolve().parent.parent))

import argparse
import json
from typing import Any, Dict, List

from config.loader import load_settings
from logs.audit import AuditLogger


def generate_explanations(data_path: Path, settings_path: Path, detections_path: Path) -> Path:
    # Data path is currently unused but kept for interface compatibility
    settings = load_settings(settings_path)
    ai_conf = settings.get("ai_engine", {})
    explanation_dir = Path(ai_conf.get("explanation_dir", "logs/explanations"))
    explanation_dir.mkdir(parents=True, exist_ok=True)

    detections = json.loads(detections_path.read_text(encoding="utf-8"))
    logger = AuditLogger(settings_path)

    explanations: List[Dict[str, Any]] = []
    for record in detections.get("detections", []):
        explanation = record.get("explanation", [])
        enriched = {
            "ip": record.get("ip"),
            "port": record.get("port"),
            "service": record.get("service"),
            "severity": record.get("severity"),
            "prediction": record.get("prediction"),
            "explanation": explanation,
        }
        explanations.append(enriched)
        if record.get("prediction"):
            logger.log_event(
                "xai_explanation",
                {
                    "ip": record.get("ip"),
                    "port": record.get("port"),
                    "service": record.get("service"),
                    "explanation": explanation,
                },
            )

    output_path = explanation_dir / "xai_explanations.json"
    with output_path.open("w", encoding="utf-8") as fh:
        json.dump({"explanations": explanations}, fh, indent=2)

    return output_path


def main() -> None:
    parser = argparse.ArgumentParser(description="Generate XAI explanations")
    parser.add_argument("data", type=Path, help="CSV used for detection")
    parser.add_argument("detections", type=Path, help="JSON generated by detect_anomalies.py")
    parser.add_argument(
        "--config",
        type=Path,
        default=Path("config/settings.yaml"),
        help="Settings file",
    )
    args = parser.parse_args()
    output = generate_explanations(args.data, args.config, args.detections)
    print(output)


if __name__ == "__main__":
    main()
